plugins {
    id 'java'
    id 'application'
}

group = 'com.jobhunter'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Selenium for browser automation
    implementation 'org.seleniumhq.selenium:selenium-java:4.15.0'

    // WebDriverManager for automatic driver management
    implementation 'io.github.bonigarcia:webdrivermanager:5.6.2'

    // Apache Tika for resume parsing (PDF/DOCX extraction)
    implementation 'org.apache.tika:tika-core:2.9.0'
    implementation 'org.apache.tika:tika-parsers-standard-package:2.9.0'

    // Simple logging
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // For testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Jakarta Mail (for email notifications)
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    // Jackson for JSON parsing (API responses)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    
    // H2 Database for embedded storage
    implementation 'com.h2database:h2:2.2.224'

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Main application configuration
application {
    mainClass = 'com.jobhunter.Main'
}

// Run task
run {
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
}

// Custom task to run the bot
task runBot(type: JavaExec) {
    group = 'application'
    description = 'Run the Job Hunter Bot'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.jobhunter.Main'
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    jvmArgs = ['-Dfile.encoding=UTF-8']
    outputs.upToDateWhen { false }
}

// Task to test setup
task testSetup {
    doLast {
        println "âœ… Gradle is working!"
        println "Java Version: ${System.getProperty('java.version')}"
        println "Project Dir: ${projectDir}"
        println "Build Dir: ${buildDir}"
    }
}

// Task to run API-only job search (faster for CI/CD)
task runAPIJob(type: JavaExec) {
    group = 'application'
    description = 'Run API-only Job Search (faster, TOS-compliant)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.jobhunter.APIJobRunner'
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    jvmArgs = ['-Dfile.encoding=UTF-8', '-Dheadless=true']
    outputs.upToDateWhen { false }
}

// Smart application workflow task
task smartApply(type: JavaExec) {
    group = 'application'
    description = 'Smart job application workflow - collects best job links for easy application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.jobhunter.workflow.SmartApplicationWorkflow'
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    jvmArgs = ['-Dfile.encoding=UTF-8']
    outputs.upToDateWhen { false }
}
