name: Job Hunter Bot - Smart Job Discovery & Notifications

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 12 hours: 6:00 AM and 6:00 PM UTC (11:30 AM and 11:30 PM IST)
    - cron: '0 6,18 * * *'
  workflow_dispatch:
    inputs:
      run_type:
        description: 'Type of job search to run'
        required: true
        default: 'smart_apply'
        type: choice
        options:
        - smart_apply
        - api_only
        - validate_setup
        - test_only
        - test_job_search

env:
  JAVA_VERSION: 21
  JOB_HUNTER_NAME: ${{ secrets.JOB_HUNTER_NAME }}
  JOB_HUNTER_EMAIL: ${{ secrets.JOB_HUNTER_EMAIL }}
  JOB_HUNTER_PHONE: ${{ secrets.JOB_HUNTER_PHONE }}
  RESUME_PATH: ${{ secrets.RESUME_PATH }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  EMAIL_TO: ${{ secrets.EMAIL_TO }}

jobs:
  # Build and test validation
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build application
      run: ./gradlew build --no-daemon --stacktrace

    - name: 🧪 Run comprehensive tests
      run: ./gradlew test --no-daemon --stacktrace
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ env.RESUME_PATH }}
        DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}

    - name: ✅ Validate setup and configuration
      run: ./gradlew validateSetup --no-daemon --stacktrace
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ env.RESUME_PATH }}
        DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts-${{ github.run_number }}
        path: build/libs/

    - name: 📋 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          build/reports/tests/
          build/test-results/

  # Smart job discovery and application workflow (12-hour schedule)
  smart-job-discovery:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.run_type == 'smart_apply' || github.event.inputs.run_type == 'test_job_search'))
    
    steps:
    - name: 📋 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐧 Setup Chrome for potential browser automation
      uses: browser-actions/setup-chrome@latest
      
    - name: 🖥️ Setup Virtual Display (for headless browser)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build application (skip tests for speed)
      run: ./gradlew build -x test --no-daemon

    - name: 🎯 Run Smart Job Discovery Workflow
      run: |
        export DISPLAY=:99
        export headless=true
        timeout 1200s ./gradlew smartApply --no-daemon --stacktrace || echo "Smart workflow completed or timed out (20 min limit)"
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ secrets.RESUME_PATH }} # Use resume URL from secrets
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}

    - name: 📄 Upload Job Application Files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: job-discovery-results-${{ github.run_number }}
        path: |
          output/quick-apply-*.html
          output/job-applications-*.md
          output/*.json
        retention-days: 30

    - name: 📢 Send completion notification
      if: always()
      run: |
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ] && [ "${{ env.DISCORD_WEBHOOK_URL }}" != "bruh" ]; then
          curl -X POST "${{ env.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"content\": \"🎯 **Smart Job Discovery Complete!** 
            📅 $(date '+%Y-%m-%d %H:%M UTC')
            🔍 Fresh job opportunities analyzed and scored
            📱 Check GitHub Actions artifacts for your personalized job dashboard
            🚀 *Your AI Job Hunter working every 12 hours!*\",
            \"username\": \"Job Hunter Bot\",
            \"avatar_url\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"
          }"
        fi

  # Fast API-only job search (for testing and quick runs)
  api-job-search:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_type == 'api_only'
    
    steps:
    - name: 📋 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build application
      run: ./gradlew build -x test --no-daemon

    - name: 🌐 Run API-only Job Search
      run: timeout 600s ./gradlew runAPIJob --no-daemon --stacktrace || echo "API job search completed (10 min limit)"
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ secrets.RESUME_PATH }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}

  # Setup validation and health check
  validate-setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_type == 'validate_setup')
    
    steps:
    - name: 📋 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build and validate
      run: ./gradlew build validateSetup --no-daemon --stacktrace
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ secrets.RESUME_PATH }}
        DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}

    - name: 📢 Health Check Notification
      if: failure()
      run: |
        if [ -n "${{ env.DISCORD_WEBHOOK_URL }}" ] && [ "${{ env.DISCORD_WEBHOOK_URL }}" != "bruh" ]; then
          curl -X POST "${{ env.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"content\": \"⚠️ **Job Hunter Bot Health Check Failed**
            📅 $(date '+%Y-%m-%d %H:%M UTC')
            🔗 Check GitHub Actions for error details
            🛠️ Please review the setup and configuration\",
            \"username\": \"Job Hunter Bot - Health Check\"
          }"
        fi

  # Test-only run (for development)
  test-only:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_type == 'test_only'
    
    steps:
    - name: 📋 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🧪 Run comprehensive test suite
      run: ./gradlew clean test --no-daemon --stacktrace
      env:
        JOB_HUNTER_NAME: ${{ env.JOB_HUNTER_NAME }}
        JOB_HUNTER_EMAIL: ${{ env.JOB_HUNTER_EMAIL }}
        JOB_HUNTER_PHONE: ${{ env.JOB_HUNTER_PHONE }}
        RESUME_PATH: ${{ secrets.RESUME_PATH }}
        DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}

    - name: 📊 Upload detailed test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results-${{ github.run_number }}
        path: |
          build/reports/
          build/test-results/